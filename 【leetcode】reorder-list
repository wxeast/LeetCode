#pragma once
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//Given a singly linked list L: L0→L1→…→Ln-1→Ln,
//	reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
//	You must do this in-place without altering the nodes' values.
//	For example,
//	Given{1,2,3,4}, reorder it to{1,4,2,3}.

//给定一个单链表L:L0→L1→…→ln1→Ln,
//重新排序到:L0→Ln→L1→ln1→L2→Ln 2→…
//	  您必须在不改变节点值的情况下完成此工作。
//	  例如,
//	  考虑到{ 1,2,3,4 },重新排序到{ 1 4 2 3 }。

class Solution {
public:
    void reorderList(ListNode *head) {
        if(head == NULL)
            return  ;
        if(head ->next == NULL)
            return  ;
        ListNode* cur = head;
        //tail 表示的是 尾节点
        ListNode* tail = head;
        while(tail->next)
        {
            tail = tail->next;
        }
        while(cur!=tail&&cur->next!= tail)
        {
            ListNode* curn = cur->next;
            ListNode* tailp = curn;
            while(tailp->next!= tail)
            {
                tailp=  tailp->next;
            }
            cur->next = tail;
            tail->next = curn;
            
            cur = curn;
            if(cur == tail)
                return ;
            tail = tailp;
            tail->next = NULL;
        }
        
    }
};

void Test()
{
	ListNode *  l1 =  new ListNode(1);
	ListNode *  l2 =  new ListNode(2);
	ListNode *  l3 =  new ListNode(3);
	ListNode *  l4 =  new ListNode(4);
	//ListNode *  l5 =  new ListNode(6);
	//ListNode *  l6 =  new ListNode(7);
	//ListNode *  l7 =  new ListNode(5);
	l1->next = l2;
	l2->next = l3;
	l3->next = l4;
	//l4->next = l5;
	//l5->next = l6;
	//l6->next = l7;
	Solution s;
	s.reorderList(l1);

}