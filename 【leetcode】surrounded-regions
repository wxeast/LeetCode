#pragma  once
#include<stack>
#include<vector>

#include<queue>
void BFS(int i,int j,vector<vector<char>> &board,int rows,int cols)
{
	queue<pair<int,int>> dq;
	dq.push(make_pair(i,j));
	while(!dq.empty())
	{
		int ii = dq.front().first;
		int jj = dq.front().second;
		board[ii][jj] = '#';
		//向上遍历
		if(ii>0&&board[ii-1][jj] == 'O')
		{
			dq.push(make_pair(ii-1,j));
		}
		//向右遍历
		if(jj<cols-1&&board[ii][jj+1] == 'O' )
		{
			dq.push(make_pair(ii,jj+1));
		}
		//向下遍历
		if(ii<cols-1&&board[ii+1][jj] == 'O' )
		{
			dq.push(make_pair(ii+1,jj));
		}
		//向左遍历
		if(jj>0 &&board[ii][jj-1] == 'O' )
		{
			dq.push(make_pair(ii,jj-1));
		}
		dq.pop();
	}
}

//void DFS(int i,int j,vector<vector<char>> &board,int rows,int cols)
//{
//
//	board[i][j] = '#';
//	//向上遍历
//	if(i>0&&board[i-1][j] == 'O')
//	{
//		DFS(i-1,j,board,rows,cols);
//	}
//	//向右遍历
//	if(j<cols-1&&board[i][j+1] == 'O' )
//	{
//		DFS(i,j+1,board,rows,cols);
//	}
//	//向下遍历
//	if(i<cols-1&&board[i+1][j] == 'O' )
//	{
//		DFS(i+1,j,board,rows,cols);
//	}
//	//向左遍历
//	if(j>0 &&board[i][j-1] == 'O' )
//	{
//		DFS(i,j+1,board,rows,cols);
//	}
//}
void solve(vector<vector<char>> &board) {
	//表示的是 行的长度 
	int rows = board.size();
	if(rows == 0)
		return ;
	//表示的列的长度
	int cols = board[0].size();
	if(rows <= 2||cols<=2)
		return ; 
	//遍历边界的点、
	//遍历第一行和最后一行；
	for(int i = 0 ;i < cols;++i)
	{
		if(board[0][i] == 'O')
		{
			BFS(0,i,board,rows,cols);
		}
		if(board[rows-1][i] == 'O')
		{
			BFS(rows-1,i,board,rows,cols);
		}

	}
	//遍历第一列和最后一列
	for(int i = 0 ;i < rows;++i)
	{
		if(board[i][0] == 'O')
		{
			BFS(i,0,board,rows,cols);
		}
		if(board[i][cols-1] == 'O')
		{
			BFS(i,cols-1,board,rows,cols);
		}
	}
	for(int i =0 ;i < rows;++i)
	{
		for(int j = 0 ;j < cols;++j)
		{
			if(board[i][j] == '#')
				board[i][j] = 'O';
			else if(board[i][j] == 'O')
				board[i][j] = 'X';
		}
	}
}

void  Test()
{
	/*[OXXOX,XOOXO,XOXOX,OXOOO,XXOXO]*/
	vector<vector<char>> board;
	vector<char> arr1;
	arr1.push_back('O');
	arr1.push_back('X');
	arr1.push_back('X');
	arr1.push_back('O');
	arr1.push_back('X');
	board.push_back(arr1);
	/*[OXXOX,XOOXO,XOXOX,OXOOO,XXOXO]*/
	vector<char> arr2;
	arr2.push_back('X');
	arr2.push_back('O');
	arr2.push_back('O');
	arr2.push_back('X');
	arr2.push_back('O');
	board.push_back(arr2);
	/*[OXXOX,XOOXO,XOXOX,OXOOO,XXOXO]*/
	vector<char> arr3;
	arr3.push_back('X');
	arr3.push_back('O');
	arr3.push_back('X');
	arr3.push_back('O');
	arr3.push_back('X');
	board.push_back(arr3);
	/*[OXXOX,XOOXO,XOXOX,OXOOO,XXOXO]*/
	vector<char> arr4;
	arr4.push_back('O');
	arr4.push_back('X');
	arr4.push_back('O');
	arr4.push_back('O');
	arr4.push_back('O');
	board.push_back(arr4);
	/*[OXXOX,XOOXO,XOXOX,OXOOO,XXOXO]*/
	vector<char> arr5;
	arr5.push_back('X');
	arr5.push_back('X');
	arr5.push_back('O');
	arr5.push_back('X');
	arr5.push_back('O');
	board.push_back(arr5);
	solve(board);

}